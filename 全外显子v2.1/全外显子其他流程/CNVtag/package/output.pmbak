package package::output;
use strict;
use warnings;

sub run{
    my $config=shift @_;
    my $hashtag=shift @_;
    my $hashCNV=shift @_;
	my $hashok=shift @_;
	my $hashanno=shift @_;
	my $Reportdir=$config->{'Report'};
	my @groups=keys %{$config->{'Group'}};
	my @samples=sort keys %$hashCNV;
	my @controlsamples=getcontrolsample($config);
	my @titles=keys %{$hashCNV->{$samples[0]}};	
	my %hashsort=sorttitle(\@titles);###按染色体与位置排序
	my %hashCNVtype=CNVtype($hashCNV,$config);###把拷贝数转换为Gain与Loss
	my %hashoutput=tongji(\%hashCNVtype,\%hashsort,$hashanno,$config);# 输出过滤
	print "Output $Reportdir/document/CNVtag.xlsx\n";
	mkdir "$Reportdir/document/" if(not -e "$Reportdir/document/");
	my $workbook=Excel::Writer::XLSX->new("$Reportdir/document/CNVtag.xlsx");
	my %format=package::format::addformat($workbook);
	my $report=$workbook->add_worksheet("tongji");
	my @controls;map{push @controls,"$_"."-Control"}@controlsamples;
	my @db=('Gene','Gene Region','Gene Exon',"cytoBand","dgvFreq","iscaPathGainCum","iscaPathLossCum","iscaLikelyPathogenic","iscaPathogenic","iscaCuratedPathogenic","CNVD","DECIPHER");
    my @toptitles=('Chr','Start','End','Length','%gc',@db,@samples,@controls);
	my $row=0;
    foreach my $i(0..$#toptitles){
	    $report->write($row,$i,$toptitles[$i],$format{"title"});
	}
    $row++;
    @titles=gettitle(\%hashsort);
    foreach my $title(@titles){
	    my $mark=0;###判断该区域是否输出
		foreach my $sample(@samples){$mark=1 if(exists($hashoutput{$title}{$sample}));}
		next if($mark==0);
		my @datas=();my @OriginalDatas=();my @colors=();
		my ($chr,$start,$end)=split /\|/,$title;
		push @datas,$chr;push @OriginalDatas,$chr;push @colors,'normal';
		push @datas,$start;push @OriginalDatas,$start;push @colors,'normal';
		push @datas,$end;push @OriginalDatas,$end;push @colors,'normal';
		push @datas,$hashtag->{$samples[0]}{$title}{'length'};push @OriginalDatas,$hashtag->{$samples[0]}{$title}{'length'};push @colors,'normal';
		push @datas,$hashtag->{$samples[0]}{$title}{'gc'};push @OriginalDatas,$hashtag->{$samples[0]}{$title}{'gc'};push @colors,'normal';
		foreach(@db){
		    my $v=" ";
			$v=$hashanno->{$title}{$_} if(exists($hashanno->{$title}{$_}));
			push @OriginalDatas,$v;push @colors,'normal';
		}
		foreach my $sample(@samples){
		    my $value=" ";my $thiscolor='normal';
			my $OriginalValue=$hashCNV->{$sample}{$title};
			$value=$hashCNVtype{$sample}{$title} if(exists($hashCNVtype{$sample}{$title}));
			$thiscolor='green' if($value eq 'Gain');
			$thiscolor='red' if($value eq 'Loss');
			if($hashok->{$sample}{$title}==1){
			   push @datas,$value;
			}else{
			    if($value eq "Gain" or $value eq 'Loss'){###Control样本在该片段上的值小于等于0.3
				   push @datas,"ControlError";
				}else{
				   push @datas," ";
				}
			}
			push @colors,$thiscolor;
            push @OriginalDatas,$OriginalValue;		
		}
		my $nextmark=1;
		foreach(@datas){
		    $nextmark=0 if($_ eq 'Gain' or $_ eq 'Loss');
		}
		next if($nextmark==1);
		foreach(@controlsamples){
		   push @OriginalDatas,$hashtag->{$_}{$title}{'normc'};push @colors,'normal';
		}
		
        foreach my $i(0..$#OriginalDatas){
	        $report->write($row,$i,$OriginalDatas[$i],$format{$colors[$i]});
	    }
        $row++;		
	}
	my $Readme=$workbook->add_worksheet("READ ME");
    package::readme::run($Readme,\%format,"readme.txt");	
}

sub gettitle{
    my $hashsort=shift @_;
	my @tmpchrs=keys %$hashsort;
	my @chrs=();
	my @normalchrs=();
	my @otherchrs=();
	foreach my $chr(@tmpchrs){
	    if($chr=~/\d/){
		   push @normalchrs,$chr;
		}else{
		   push @otherchrs,$chr;
		}
	}
	@normalchrs=sort {$a<=>$b} @normalchrs;
	@otherchrs=sort @otherchrs;
	@chrs=(@normalchrs,@otherchrs);	
	my @titles=();
	foreach my $chr(@chrs){
	    my @thistitles=split /,/,$hashsort->{$chr};
		@titles=(@titles,@thistitles);
	}
	return @titles;
}

sub tongji{
    my $hashCNVtype=shift @_;
	my $hashsort=shift @_;
	my $hashanno=shift @_;
	my $config=shift @_;
	my @groups=keys %{$config->{'Group'}};
	my %hashoutput=();
	my @samples=sort keys %$hashCNVtype;
	my @tmpchrs=keys %$hashsort;
	my $singlecontinue=$config->{'SingleContinue'};
	my @chrs=();
	my @normalchrs=();
	my @otherchrs=();
	foreach my $chr(@tmpchrs){
	    if($chr=~/\d/){
		   push @normalchrs,$chr;
		}else{
		   push @otherchrs,$chr;
		}
	}
	@normalchrs=sort {$a<=>$b} @normalchrs;
	@otherchrs=sort @otherchrs;
	@chrs=(@normalchrs,@otherchrs);
	foreach my $group(@groups){
	    my ($case,$control)=split /;/,$config->{'Group'}{$group};
		my @cases=split /,/,$case;
		if(@cases==1){##单个样本，看基因上连续2个片段
		    CNVContinue($hashCNVtype,\%hashoutput,\@chrs,$hashsort,\@cases,$hashanno,$singlecontinue);
		}else{##多个样本，看多个样本是否均满足相同的变异
		    CNVMulti($hashCNVtype,\%hashoutput,\@chrs,$hashsort,\@cases);
		}
	}
    return %hashoutput;
}

sub CNVContinue{
    my $hashCNVtype=shift @_;
	my $hashoutput=shift @_;
	my $chrs=shift @_;
	my $hashsort=shift @_;
	my $samples=shift @_;
	my $hashanno=shift @_;
	my $continue=shift @_;# 连续相同类型的数量
	my $sample=$$samples[0];# 样本
	foreach my $chr(@$chrs){
	    my @titles=split /,/,$hashsort->{$chr};
		my $thistype="";###类型typetitles
		my $thisgene="";
		my @typetitles=();###连续target
		foreach my $title(@titles){
		    my $type=$hashCNVtype->{$sample}{$title};
			my $gene=" ";$gene=$hashanno->{$title}{'Gene'};
			if($type eq $thistype and $gene eq $thisgene){# 相同,列入候选
			   push @typetitles,$title;
			}else{ # 不同
			   #（1）检测是否需要保存，并保存
			   keepContinue(\@typetitles,$hashoutput,$sample) if(@typetitles>=$continue);
			   #（2）清空，并检测当前title是否可以导入候选
			   $thistype="";
			   $thisgene="";
			   @typetitles=();
			   if($type ne 'Normal'){
			      $thistype=$type;
				  $thisgene=$gene;
				  push @typetitles,$title;
			   }
			}
        }
        keepContinue(\@typetitles,$hashoutput,$sample) if(@typetitles>=$continue);		
	}		
}

sub keepContinue{
    my $typetitles=shift @_;
	my $hashoutput=shift @_;
	my $sample=shift @_;
	map{$hashoutput->{$_}{$sample}++;}@$typetitles;
}

sub CNVMulti{
    my $hashCNVtype=shift @_;
	my $hashoutput=shift @_;
	my $chrs=shift @_;
	my $hashsort=shift @_;
	my $samples=shift @_;
	foreach my $chr(@$chrs){
	    my @titles=split /,/,$hashsort->{$chr};
		foreach my $title(@titles){
		    my %hash;
			map{$hash{$hashCNVtype->{$_}{$title}}++;}@$samples;
			my @types=keys %hash;
			if(@types==1 and $types[0] ne 'Normal'){
			   map{$hashoutput->{$title}{$_}++;}@$samples;
			}		     
		}
	}
}

sub sorttitle{
    my $titles=shift @_;
	my %hashdata=();
	foreach my $title(@$titles){
	    my ($chr,$start,$end)=split /\|/,$title;
		$hashdata{$chr}{$start}{$end}=$title;
	}
	my %hashsort=();
	my @chrs=keys %hashdata;
	foreach my $chr(@chrs){
	    my @thistitles=();
	    my @starts=sort {$a<=>$b} keys %{$hashdata{$chr}};
		foreach my $start(@starts){
		    my @ends=sort {$a<=>$b} keys %{$hashdata{$chr}{$start}};
			foreach my $end(@ends){
			    push @thistitles,$hashdata{$chr}{$start}{$end}
			}
		}
		my $str=join ",",@thistitles;
		$hashsort{$chr}=$str;
	}
    return %hashsort;
}

sub CNVtype{
    my $hashCNV=shift @_;
    my $config=shift @_;
    my $Gain=$config->{'Gain'};
    my $Loss=$config->{'Loss'};
	my %hashCNVtype=();
	my @samples=sort keys %$hashCNV; 
	my @titles=keys %{$hashCNV->{$samples[0]}};	
	foreach my $title(@titles){
	    foreach my $sample(@samples){
		    my $value=$hashCNV->{$sample}{$title};
			if($value>$Gain){###大于1.8设为多拷贝
			   $hashCNVtype{$sample}{$title}='Gain';
			}elsif($value<$Loss){###小于0.6设为低拷贝
			   $hashCNVtype{$sample}{$title}='Loss';
			}else{
			   $hashCNVtype{$sample}{$title}='Normal';
			}
		}
	}
    return %hashCNVtype;
}

sub getcontrolsample{
    my $config=shift @_;
	my @groups=();@groups=keys %{$config->{'Group'}} if(exists($config->{'Group'}));
	my @shows=();@shows=keys %{$config->{'Show'}} if(exists($config->{'Show'}));
	my @counts=(@groups,@shows);
	my %hash;
	foreach my $count(@counts){
	    my $info=$config->{'Group'}{$count} if(exists($config->{'Group'}{$count}));
		   $info=$config->{'Show'}{$count} if(exists($config->{'Show'}{$count}));
	    my ($case,$control)=split /;/,$info;
		my @controls=split /,/,$control;
		map{$hash{$_}=1 if($_=~/\w/);}@controls;
	}
    my @samples=sort keys %hash;
    return @samples;	
}


1